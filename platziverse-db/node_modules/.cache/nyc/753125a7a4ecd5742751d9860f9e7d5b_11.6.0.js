'use strict';var cov_sqnlcl3km=function(){var path='/home/sistemas/Documentos/Cursos/NodeJs/platziverse/lib/lib_metric.js',hash='3d3909709e4f8c6564e8ef3c5756f2eed99a2b0c',Function=function(){}.constructor,global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/sistemas/Documentos/Cursos/NodeJs/platziverse/lib/lib_metric.js',statementMap:{'0':{start:{line:3,column:0},end:{line:58,column:1}},'1':{start:{line:5,column:18},end:{line:9,column:6}},'2':{start:{line:11,column:4},end:{line:15,column:5}},'3':{start:{line:12,column:6},end:{line:12,column:48}},'4':{start:{line:13,column:21},end:{line:13,column:53}},'5':{start:{line:14,column:6},end:{line:14,column:28}},'6':{start:{line:52,column:2},end:{line:57,column:3}}},fnMap:{'0':{name:'setupMetric',decl:{start:{line:3,column:26},end:{line:3,column:37}},loc:{start:{line:3,column:64},end:{line:58,column:1}},line:3},'1':{name:'create',decl:{start:{line:4,column:17},end:{line:4,column:23}},loc:{start:{line:4,column:39},end:{line:16,column:3}},line:4}},branchMap:{'0':{loc:{start:{line:11,column:4},end:{line:15,column:5}},type:'if',locations:[{start:{line:11,column:4},end:{line:15,column:5}},{start:{line:11,column:4},end:{line:15,column:5}}],line:11}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0},f:{'0':0,'1':0},b:{'0':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_sqnlcl3km.s[0]++;module.exports=function setupMetric(MetricModel,AgentModel){cov_sqnlcl3km.f[0]++;async function create(uuid,metric){cov_sqnlcl3km.f[1]++;const agent=(cov_sqnlcl3km.s[1]++,await AgentModel.findOne({where:{uuid}}));cov_sqnlcl3km.s[2]++;if(agent){cov_sqnlcl3km.b[0][0]++;cov_sqnlcl3km.s[3]++;Object.assign(metric,{agentId:agent.id});const result=(cov_sqnlcl3km.s[4]++,await MetricModel.create(metric));cov_sqnlcl3km.s[5]++;return result.toJSON();}else{cov_sqnlcl3km.b[0][1]++;}}/*async function findByAgentUuid (uuid) {
    return MetricModel.findAll({
      attributes: ['type'],
      group: ['type'],
      include: [{
        attributes: [],
        model: AgentModel,
        where: {
          uuid
        }
      }],
      raw: true
    })
  }

  async function findByTypeAgentUuid (type, uuid) {
    return MetricModel.findAll({
      attributes: ['id', 'type', 'value', 'createdAt'],
      where: {

      },
      limit: 20,
      order: [['createdAt', 'DESC']],
      include: [{
        attributes: [],
        model: AgentModel,
        where: {
          uuid
        }
      }],
      raw: true
    })
  }*/cov_sqnlcl3km.s[6]++;return{create//findByAgentUuid,
//findByTypeAgentUuid
};};