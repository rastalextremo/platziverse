{"version":3,"sources":["agent-tests.js"],"names":["test","require","proxyquire","sinon","db","config","logging","AgentStub","MetricStub","belongsTo","spy","sandbox","beforeEach","create","hasMany","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith"],"mappings":"AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,aAAaD,QAAQ,YAAR,CAAnB;AACA,MAAME,QAAQF,QAAQ,OAAR,CAAd;;AAEA,IAAIG,KAAK,IAAT;;AAEA,IAAIC,SAAS;AACXC,WAAS,YAAY,CAAE;AADZ,CAAb;;AAIA,IAAIC,YAAY,IAAhB;;AAEA,IAAIC,aAAa;AACfC,aAAWN,MAAMO,GAAN;AADI,CAAjB;;AAIA,IAAIC,UAAU,IAAd;;AAEAX,KAAKY,UAAL,CAAgB,YAAY;AAC1BD,YAAUR,MAAMQ,OAAN,CAAcE,MAAd,EAAV;AACAN,cAAY;AACVO,aAASH,QAAQD,GAAR;AADC,GAAZ;AAGA,QAAMK,gBAAgBb,WAAW,aAAX,EAA0B;AAC9C,sBAAkB,MAAMK,SADsB;AAE9C,uBAAmB,MAAMC;AAFqB,GAA1B,CAAtB;AAIAJ,OAAK,MAAMW,cAAcV,MAAd,CAAX;AACD,CAVD;;AAYAL,KAAKgB,SAAL,CAAe,MAAM;AACnBL,aAAWR,MAAMQ,OAAN,CAAcM,OAAd,EAAX;AACD,CAFD;;AAIAjB,KAAK,OAAL,EAAckB,KAAK;AAAA;;AACjBA,IAAEC,MAAF,uBAAS,qCAAGC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmB,wBAAnB;AACD,CAFD;;AAIApB,KAAKqB,MAAL,CAAY,OAAZ,EAAqBH,KAAK;AAAA;AAAA;AAAA;AAAA;;AACxBA,IAAEI,IAAF,yBAAO,gEAAUR,OAAV,wBAAkBS,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,kCAAjC;AACAL,IAAEI,IAAF,yBAAO,uEAAUR,OAAV,+BAAkBU,UAAlB,aAA6BhB,UAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiD,qCAAjD;AACAU,IAAEI,IAAF,yBAAO,iEAAWb,SAAX,wBAAqBc,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoC,oCAApC;AACAL,IAAEI,IAAF,yBAAO,wEAAWb,SAAX,+BAAqBe,UAArB,aAAgCjB,SAAhC,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmD,oCAAnD;AACD,CALD","file":"agent-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst proxyquire = require('proxyquire')\nconst sinon = require('sinon')\n\nlet db = null\n\nlet config = {\n  logging: function () {}\n}\n\nlet AgentStub = null\n\nlet MetricStub = {\n  belongsTo: sinon.spy()\n}\n\nlet sandbox = null\n\ntest.beforeEach(async () => {\n  sandbox = sinon.sandbox.create()\n  AgentStub = {\n    hasMany: sandbox.spy()\n  }\n  const setupDatabase = proxyquire('../index.js', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sinon.sandbox.restore()\n})\n\ntest('Agent', t => {\n  t.truthy(db.Agent, 'Servicio Agente Existe')\n})\n\ntest.serial('Setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany fué ejecutada')\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argumento MetricModel bien recibido')\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongTo fué ejecutado')\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argumento AgentModel bien recibido')\n})"]}