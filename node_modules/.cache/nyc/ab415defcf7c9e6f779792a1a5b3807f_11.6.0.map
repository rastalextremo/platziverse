{"version":3,"sources":["agent-tests.js"],"names":["test","require","proxyquire","sinon","agentFixtures","db","id","uuid","config","logging","AgentStub","MetricStub","belongsTo","spy","sandbox","single","Object","assign","uuidArgs","where","connectedArgs","connected","usernameArgs","username","newAgentArgs","name","hostname","pid","beforeEach","create","hasMany","stub","withArgs","returns","Promise","resolve","toJSON","update","findOne","findByUuid","findById","findAll","all","platzi","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","calledOnce","deepEqual","createOrUpdate","calledTwice"],"mappings":"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","file":"agent-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst proxyquire = require('proxyquire')\nconst sinon = require('sinon')\nconst agentFixtures = require('./fixtures/fx_agent')\n\nlet db = null\nlet id = 1\nlet uuid = 'yyy-yyy-yyy'\n\nlet config = {\n  logging: function () {}\n}\n\nlet AgentStub = null\n\nlet MetricStub = {\n  belongsTo: sinon.spy()\n}\n\nlet sandbox = null\nlet single = Object.assign({}, agentFixtures.single)\n\nlet uuidArgs = {\n  where: {\n    uuid\n  }\n}\n\nlet connectedArgs = {\n  where: {\n    connected : true\n  }\n}\n\nlet usernameArgs = {\n  where: {\n    username: 'platzi',\n    connected: true \n  }\n}\n\nlet newAgentArgs = {\n  uuid : '123-123-123',\n  name: 'test',\n  username: 'test',\n  hostname: 'test',\n  pid: 0,\n  connected: false\n}\n\ntest.beforeEach(async () => {\n  sandbox = sinon.sandbox.create()\n\n  AgentStub = {\n    hasMany: sandbox.spy()\n  }\n\n  // Modelo create Stub\n  AgentStub.create = sandbox.stub()\n  AgentStub.create.withArgs(newAgentArgs).returns(Promise.resolve({toJSON () {return newAgentArgs}}))\n\n  // Modelo update Stub\n  AgentStub.update = sandbox.stub()\n  AgentStub.update.withArgs(single, uuidArgs).returns(Promise.resolve(agentFixtures.single))\n\n  // Modelo findOne Stub\n  AgentStub.findOne = sandbox.stub()\n  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.findByUuid(uuid)))\n\n  // Modelo findById Stub\n  AgentStub.findById = sandbox.stub()\n  AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.findById(id)))\n\n  // Modelo findByUuid Stub\n  AgentStub.findByUuid = sandbox.stub()\n  AgentStub.findByUuid.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.findByUuid(uuid)))\n\n  // Modelo findAll Stub\n  AgentStub.findAll = sandbox.stub()\n  AgentStub.findAll.withArgs().returns(Promise.resolve(agentFixtures.all))\n  AgentStub.findAll.withArgs(connectedArgs).returns(Promise.resolve(agentFixtures.connected))\n  AgentStub.findAll.withArgs(usernameArgs).returns(Promise.resolve(agentFixtures.platzi))\n\n\n  const setupDatabase = proxyquire('../index.js', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sinon.sandbox.restore()\n})\n\ntest('Agent', t => {\n  t.truthy(db.Agent, 'Servicio Agente Existe')\n})\n\ntest.serial('Setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany fué ejecutada')\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argumento MetricModel bien recibido')\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongTo fué ejecutado')\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argumento AgentModel bien recibido')\n})\n\ntest.serial('Agent#findById', async t => {\n  let agent = await db.Agent.findById(id)\n  t.true(AgentStub.findById.called, 'Funcion findById esta siendo llamada')\n  t.true(AgentStub.findById.calledOnce, 'Funcion findById esta siendo llamada una sola vez')\n  t.true(AgentStub.findById.calledWith(id), 'Funcion findById esta siendo llamada con un id de argumento')\n\n  t.deepEqual(agent, agentFixtures.findById(id), 'Todo Perfecto')\n})\n\ntest.serial('Agent#createOrUpdate - Exist', async t => {\n  let agent = await db.Agent.createOrUpdate(single)\n\n  t.true(AgentStub.findOne.called, 'Funcion findOne esta siendo llamada')\n  t.true(AgentStub.findOne.calledTwice, 'Funcion findOne esta siento llamada dos veces')\n  t.true(AgentStub.update.called, 'Funcion update esta siendo llamada')\n  t.true(AgentStub.update.calledOnce, 'Funcion update esta siento llamada una vez')\n\n  t.deepEqual(agent, single, 'El agente creado es perfectamente igual al que le envié')\n})\n\ntest.serial('Agent#createOrUpdate - New', async t => {\n  let agent = await db.Agent.createOrUpdate(newAgentArgs)\n\n  t.true(AgentStub.findOne.called, 'Funcion findOne esta siendo llamada')\n  t.true(AgentStub.findOne.calledOnce, 'Funcion findOne esta siendo llamada una sola vez')\n  t.true(AgentStub.findOne.calledWith({where: {uuid: newAgentArgs.uuid}}), 'Funcion findOne esta siendo llamada con los argumentos de newAgentArgs')\n  t.true(AgentStub.create.called, 'Funcion create esta siendo llamada')\n  t.true(AgentStub.create.calledOnce, 'Funcion create esta siendo llamada una sola vez')\n  //t.true(AgentStub.create.calledWith({newAgentArgs}), 'Funcion create esta siendo llamada con los argumentos de newAgentArgs')\n\n  t.deepEqual(agent, newAgentArgs, 'El agente creado es perfectamente igual al que le envié')\n})"]}