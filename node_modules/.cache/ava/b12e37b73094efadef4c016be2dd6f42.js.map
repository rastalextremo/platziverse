{"version":3,"sources":["metric_test.js"],"names":["test","require","proxyquire","sinon","agentFixtures","metricFixtures","config","logging","AgentStub","MetricStub","db","uuid","type","sandbox","uuidArgs","where","newMetric","agentId","value","beforeEach","create","hasMany","spy","belongsTo","findOne","stub","withArgs","returns","Promise","resolve","findByUuid","toJSON","setupDatabase","afterEach","restore","t","truthy","Metric","serial","metric","true","called","calledOnce","calledWith","deepEqual"],"mappings":"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","file":"metric_test.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst proxyquire = require('proxyquire')\nconst sinon = require('sinon')\n\nconst agentFixtures = require('./fixtures/fx_agent')\nconst metricFixtures = require('./fixtures/fx_metric')\n\nlet config = {\n  logging: function () {}\n}\n\nlet AgentStub = null\nlet MetricStub = null\n\nlet db = null\nlet uuid = 'yyy-yyy-yyy'\nlet type = 'CPU'\n\nlet sandbox = null\n\nlet uuidArgs = {\n  where: {\n    uuid\n  }\n}\n\nlet newMetric = {\n  agentId: 1,\n  type: 'CPU',\n  value: '23%'\n}\n\ntest.beforeEach(async () => {\n  sandbox = sinon.sandbox.create()\n\n  AgentStub = {\n    hasMany: sandbox.spy()\n  }\n\n  MetricStub = {\n    belongsTo: sandbox.spy()\n  }\n\n  // Modelo findOne Stub\n  AgentStub.findOne = sandbox.stub()\n  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.findByUuid))\n\n  MetricStub.create = sandbox.stub()\n  MetricStub.create.withArgs(newMetric).returns(Promise.resolve({toJSON () {return newMetric}}))\n\n  const setupDatabase = proxyquire('../index.js', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sinon.sandbox.restore()\n})\n\ntest('Metric', t => {\n  t.truthy(db.Metric, 'Servicio Metric Existe')\n})\n\ntest.serial('Metric#create', async t => {\n  let metric = await db.Metric.create(uuid, newMetric)\n\n  t.true(AgentStub.findOne.called, 'Funcion findOne esta siendo llamada')\n  t.true(AgentStub.findOne.calledOnce, 'Funcion findOne esta siento llamada una vez')\n  t.true(AgentStub.findOne.calledWith(uuidArgs), 'Funcion findOne esta siento llamada con parametros')\n  t.true(MetricStub.create.called, 'Funcion create esta siendo llamada')\n  t.true(MetricStub.create.calledOnce, 'Funcion create esta siento llamada una vez')\n\n  t.deepEqual(metric, newMetric, 'La Metrica creada es perfectamente igual al que le envi√©')\n})\n\n"]}