{"version":3,"sources":["agent-tests.js"],"names":["test","require","proxyquire","sinon","agentFixtures","db","id","uuid","config","logging","AgentStub","MetricStub","belongsTo","spy","sandbox","single","Object","assign","uuidArgs","where","beforeEach","create","hasMany","update","stub","withArgs","returns","Promise","resolve","findOne","byUuid","byId","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","findbyId","calledOnce","deepEqual","createOrUpdate","calledTwice"],"mappings":"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","file":"agent-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst proxyquire = require('proxyquire')\nconst sinon = require('sinon')\nconst agentFixtures = require('./fixtures/fx_agent')\n\nlet db = null\nlet id = 1\nlet uuid = 'yyy-yyy-yyy'\n\nlet config = {\n  logging: function () {}\n}\n\nlet AgentStub = null\n\nlet MetricStub = {\n  belongsTo: sinon.spy()\n}\n\nlet sandbox = null\nlet single = Object.assign({}, agentFixtures.single)\nlet uuidArgs = {\n  where: {\n    uuid\n  }\n}\n\ntest.beforeEach(async () => {\n  sandbox = sinon.sandbox.create()\n\n  AgentStub = {\n    hasMany: sandbox.spy()\n  }\n\n  // Modelo update Stub\n  AgentStub.update = sandbox.stub()\n  AgentStub.update.withArgs(single, uuidArgs).returns(Promise.resolve(agentFixtures.single))\n\n  // Modelo findOne Stub\n  AgentStub.findOne = sandbox.stub()\n  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)))\n\n  // Modelo byId Stub\n  AgentStub.byId = sandbox.stub()\n  AgentStub.byId.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)))\n\n  const setupDatabase = proxyquire('../index.js', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sinon.sandbox.restore()\n})\n\ntest('Agent', t => {\n  t.truthy(db.Agent, 'Servicio Agente Existe')\n})\n\ntest.serial('Setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany fué ejecutada')\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argumento MetricModel bien recibido')\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongTo fué ejecutado')\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argumento AgentModel bien recibido')\n})\n\ntest.serial('Agent#findbyId', async t => {\n  let agent = await db.Agent.findbyId(id)\n  t.true(AgentStub.findbyId.called, 'Funcion byId esta siendo llamada')\n  t.true(AgentStub.findbyId.calledOnce, 'Funcion byId esta siendo llamada una sola vez')\n  t.true(AgentStub.findbyId.calledWith(id), 'Funcion byId esta siendo llamada con un id de argumento')\n\n  t.deepEqual(agent, agentFixtures.findbyId(id), 'Todo Perfecto')\n})\n\ntest.serial('Agent#createOrUpdate - Exist', async t => {\n  let agent = await db.Agent.createOrUpdate(single)\n\n  t.true(AgentStub.findOne.called, 'Funcion findOne esta siendo llamada')\n  t.true(AgentStub.findOne.calledTwice, 'Funcion findOne esta siento llamada dos veces')\n  t.true(AgentStub.update.called, 'Funcion update esta siendo llamada')\n  t.true(AgentStub.update.calledOnce, 'Funcion update esta siento llamada una vez')\n\n  t.deepEqual(agent, single, 'El agente creado es perfectamente igual al que le envié')\n})"]}