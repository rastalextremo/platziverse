{"version":3,"sources":["agent-tests.js"],"names":["test","require","proxyquire","sinon","agentFixtures","db","id","config","logging","AgentStub","MetricStub","belongsTo","spy","sandbox","single","Object","assign","beforeEach","create","hasMany","byId","stub","withArgs","return","Promise","resolve","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","deepEqual"],"mappings":"AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,aAAaD,QAAQ,YAAR,CAAnB;AACA,MAAME,QAAQF,QAAQ,OAAR,CAAd;AACA,MAAMG,gBAAgBH,QAAQ,qBAAR,CAAtB;;AAEA,IAAII,KAAK,IAAT;AACA,IAAIC,KAAK,CAAT;;AAEA,IAAIC,SAAS;AACXC,WAAS,YAAY,CAAE;AADZ,CAAb;;AAIA,IAAIC,YAAY,IAAhB;;AAEA,IAAIC,aAAa;AACfC,aAAWR,MAAMS,GAAN;AADI,CAAjB;;AAIA,IAAIC,UAAU,IAAd;AACA,IAAIC,SAASC,OAAOC,MAAP,CAAc,EAAd,EAAkBZ,cAAcU,MAAhC,CAAb;;AAEAd,KAAKiB,UAAL,CAAgB,YAAY;AAC1BJ,YAAUV,MAAMU,OAAN,CAAcK,MAAd,EAAV;;AAEAT,cAAY;AACVU,aAASN,QAAQD,GAAR;;AAGX;AAJY,GAAZ,CAKAH,UAAUW,IAAV,GAAiBP,QAAQQ,IAAR,EAAjB;AACAZ,YAAUW,IAAV,CAAeE,QAAf,CAAwBhB,EAAxB,EAA4BiB,MAA5B,CAAmCC,QAAQC,OAAR,CAAgBrB,cAAcgB,IAAd,CAAmBd,EAAnB,CAAhB,CAAnC;;AAEA,QAAMoB,gBAAgBxB,WAAW,aAAX,EAA0B;AAC9C,sBAAkB,MAAMO,SADsB;AAE9C,uBAAmB,MAAMC;AAFqB,GAA1B,CAAtB;AAIAL,OAAK,MAAMqB,cAAcnB,MAAd,CAAX;AACD,CAhBD;;AAkBAP,KAAK2B,SAAL,CAAe,MAAM;AACnBd,aAAWV,MAAMU,OAAN,CAAce,OAAd,EAAX;AACD,CAFD;;AAIA5B,KAAK,OAAL,EAAc6B,KAAK;AAAA;;AACjBA,IAAEC,MAAF,uBAAS,qCAAGC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmB,wBAAnB;AACD,CAFD;;AAIA/B,KAAKgC,MAAL,CAAY,OAAZ,EAAqBH,KAAK;AAAA;AAAA;AAAA;AAAA;;AACxBA,IAAEI,IAAF,yBAAO,gEAAUd,OAAV,wBAAkBe,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,kCAAjC;AACAL,IAAEI,IAAF,yBAAO,uEAAUd,OAAV,+BAAkBgB,UAAlB,aAA6BzB,UAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiD,qCAAjD;AACAmB,IAAEI,IAAF,yBAAO,iEAAWtB,SAAX,wBAAqBuB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoC,oCAApC;AACAL,IAAEI,IAAF,yBAAO,wEAAWtB,SAAX,+BAAqBwB,UAArB,aAAgC1B,SAAhC,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmD,oCAAnD;AACD,CALD;;AAOAT,KAAKgC,MAAL,CAAY,YAAZ,EAA0B,MAAMH,CAAN,IAAW;AAClC,MAAIO,QAAQ,MAAM/B,GAAG0B,KAAH,CAASX,IAAT,CAAcd,EAAd,CAAlB;;AAEAuB,IAAEQ,SAAF,CAAYD,KAAZ,EAAmBhC,cAAcgB,IAAd,CAAmBd,EAAnB,CAAnB,EAA2C,eAA3C;AACF,CAJD","file":"agent-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst proxyquire = require('proxyquire')\nconst sinon = require('sinon')\nconst agentFixtures = require('./fixtures/fx_agent')\n\nlet db = null\nlet id = 1\n\nlet config = {\n  logging: function () {}\n}\n\nlet AgentStub = null\n\nlet MetricStub = {\n  belongsTo: sinon.spy()\n}\n\nlet sandbox = null\nlet single = Object.assign({}, agentFixtures.single)\n\ntest.beforeEach(async () => {\n  sandbox = sinon.sandbox.create()\n\n  AgentStub = {\n    hasMany: sandbox.spy()\n  }\n\n  // Modelo byId Stub\n  AgentStub.byId = sandbox.stub()\n  AgentStub.byId.withArgs(id).return(Promise.resolve(agentFixtures.byId(id)))\n\n  const setupDatabase = proxyquire('../index.js', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sinon.sandbox.restore()\n})\n\ntest('Agent', t => {\n  t.truthy(db.Agent, 'Servicio Agente Existe')\n})\n\ntest.serial('Setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany fué ejecutada')\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argumento MetricModel bien recibido')\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongTo fué ejecutado')\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argumento AgentModel bien recibido')\n})\n\ntest.serial('Agent#byId', async t => {\n   let agent = await db.Agent.byId(id)\n\n   t.deepEqual(agent, agentFixtures.byId(id), 'Todo Perfecto')\n})"]}